os: unstable

platform:
  - x86
  - x64

configuration: Release

# don't re-build for tags so that [publish binary] is not re-run
skip_tags: true

# fix possible line-endings issues
init:
  - git config --global core.autocrlf input

build:
  parallel: true

environment:
  matrix:
  # node
  - NVERSION: "4.5.0"
    RUNTIME: "node"
    RVERSION: "4.5.0"

  - NVERSION: "5.12.0"
    RUNTIME: "node"
    RVERSION: "5.12.0"

  - NVERSION: "6.5.0"
    RUNTIME: "node"
    RVERSION: "6.5.0"

  # electron
  - NVERSION: "6"
    RUNTIME: "electron"
    RVERSION: "0.37.8"

  - NVERSION: "6"
    RUNTIME: "electron"
    RVERSION: "1.2.3"


# get deps & setup arch
install:
  - ps: Install-Product node $env:NVERSION
  - npm install npm -g

  # update path
  #- PATH=$PATH:`pwd`/node_modules/.bin

# download node for x86
#- BASE_URL=$(node -p "'https://nodejs.org/dist/' + process.version")
#- X86_FILE=$(node -p "'node-' + process.version + '-' + process.platform + '-x86'")
#- if [[ "$ARCH" == "ia32" ]]; then wget $BASE_URL/$X86_FILE.tar.gz; tar -xf $X86_FILE.tar.gz; export PATH=$X86_FILE/bin:$PATH; fi

# use g++-4.8 on linux
#- if [[ $TRAVIS_OS_NAME == "linux" ]]; then export CXX="g++-4.8"; CC="gcc-4.8"; fi


# figure out if we should publish
  #- PUBLISH_BINARY=false
  #- COMMIT_MESSAGE=$(git show -s --format=%B $TRAVIS_COMMIT | tr -d '\n')
  #- if [[ ${COMMIT_MESSAGE} =~ "[publish binary]" ]]; then PUBLISH_BINARY=true; fi
  #- echo "Publishing native platform Binary Package? ->" $PUBLISH_BINARY

# cleanup npm progress
  - ps: npm config set -g cafile=package.json | Write-Host;
  - ps: npm config set -g strict-ssl=false | Write-Host;

build_script:
  - npm install --build-from-source

# if we're publishing, do it
#  if [[ $PUBLISH_BINARY == true ]]; then node-pre-gyp --runtime=$RUNTIME --target=$RVERSION --target_arch=$ARCH package; fi;
#  if [[ $PUBLISH_BINARY == true ]]; then node-pre-gyp-github publish --release; fi;
#  if [[ $PUBLISH_BINARY == true ]]; then npm install --fallback-to-build=false; fi;

